@Library('lisk-jenkins') _

pipeline {
	agent { node { label 'lisk-sdk' } }
	stages {
		stage('Cancel previous build') {
			steps {
				script {
					if (env.CHANGE_ID) {
						// we are build a pull request, try cancelling previous build
						cancelPreviousBuild()
					}
				}
			}
		}
		stage('Install') {
			steps {
				nvm(getNodejsVersion()) {
					sh '''
					npm ci
					npm run bootstrap -- --ci
					npm run build
					npm run lint
					'''
				}
			}
		}
		stage('Test') {
			steps {
				nvm(getNodejsVersion()) {
					sh 'npx lerna run test --ignore lisk-{framework,commander}'
					dir('commander') {
						sh '''
						LISK_COMMANDER_CONFIG_DIR=$WORKSPACE/.lisk npm test
						'''
					}
				}
			}
			post {
				cleanup {
					sh 'rm -f $WORKSPACE/.lisk/config.lock'
				}
			}
		}
	}
	post {
		always {
			script {
				sh '''
					rm -rf .nyc_output; mkdir -p .nyc_output
					rm -rf coverage; mkdir -p coverage
					for d in elements/*; do
						if [ -d $d  ] && [ -d $d/.nyc_output  ]; then
							cp -r $d/.nyc_output/* ./.nyc_output
						fi
					done
					cp -r ./commander/.nyc_output/* ./.nyc_output
				'''
				try {
					nvm(getNodejsVersion()) {
						sh '''
						npx nyc merge ./.nyc_output coverage/coverage.json
						npx nyc report --report-dir coverage --reporter=text --reporter=cobertura
						'''
					}
					cobertura coberturaReportFile: 'coverage/cobertura-coverage.xml'
				} catch(err) {
					println "Could not report coverage statistics:\n${err}"
				}
				sh 'rm -rf */node_modules'
			}
		}
	}
}
// vim: filetype=groovy
